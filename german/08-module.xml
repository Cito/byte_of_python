<chapter id="modules">

	<!-- German translation 2005-04-14 by Bernhard Krieger -->
	<!-- Proofreading 2005-04-16 Christoph Zwerschke -->
	<!-- Proofreading 2006-08-04 Gunter Hannig -->

	<title>Module</title> <!-- Modules -->

	<section id="modules-intro">

		<title>Einführung</title> <!-- Introduction -->

		<para>

		Sie haben gesehen, wie Sie Code in Ihren Programm wieder verwenden können, indem Sie
		Funktionen nur einmal definieren. Was machen Sie aber, wenn Sie eine ganze Anzahl von
		Funktionen in anderen Programmen benutzen wollen? Wie Sie vielleicht vermutet haben,
		sind Module die Lösung dafür. Ein Modul ist im Grunde nur eine Datei, die alle von Ihnen
		definierten Funktionen und Variablen beinhaltet. Um ein Modul in anderen Programmen
		wiederverwenden zu können, <emphasis role="bold">muss</emphasis> der
		Dateiname eines Moduls die Endung <filename>.py</filename> haben.

		<!-- You have seen how you can reuse code in your program by defining functions once. What
		if you wanted to reuse a number of functions in other programs that you write? As you
		might have guessed, the answer is modules. A module is basically a file containing all
		your functions and variables that you have defined. To reuse the module in other programs,
		the filename of the module <emphasis role="bold">must</emphasis> have a
		<filename>.py</filename> extension. -->

		</para>
		<para>

		Ein Modul kann von einem anderen Programm <emphasis>importiert</emphasis> werden,
		um von dessen Funktionalität Gebrauch zu machen. Genauso können wir auch die Python-Standardbibliothek
		verwenden. Zunächst werden wir sehen, wie wir die Module der Standardbibliothek verwenden können.

		<!-- A module can be <emphasis>imported</emphasis> by another program to make use of its
		functionality. This is how we can use the Python standard library as well. First,
		we will see how to use the standard library modules. -->

		</para>

		<section id="using-sys-module">
			<title>Benutzung des sys-Moduls</title> <!-- Using the sys module -->

			<example id="using-sys-module-example">
				<title>Benutzung des sys-Moduls
					(<ulink url="code/beispiel_sys.py">beispiel_sys.py</ulink>)
				</title> <!-- Using the sys module -->
				<programlisting>
				<![CDATA[
#!/usr/bin/python

import sys

print 'Die Kommandozeilenparameter sind:'
for i in sys.argv:
	print i

print '\n\nDer PYTHONPATH ist', sys.path, '\n'
				]]>
				</programlisting>
				<!-- <![CDATA[
#!/usr/bin/python
# Filename: using_sys.py

import sys

print 'The command line arguments are:'
for i in sys.argv:
	print i

print '\n\nThe PYTHONPATH is', sys.path, '\n'
				]]> -->
			</example>

			<section id="using-sys-module-output">
				<title>Ausgabe</title> <!-- Output -->
				<screen>
				<![CDATA[
$ python beispiel_sys.py Wir sind Argumente
Die Kommandozeilenparameter sind:
beispiel_sys.py
Wir
sind
Argumente


Der PYTHONPATH ist ['/home/swaroop/byte/code', '/usr/lib/python23.zip',
'/usr/lib/python2.3', '/usr/lib/python2.3/plat-linux2',
'/usr/lib/python2.3/lib-tk', '/usr/lib/python2.3/lib-dynload',
'/usr/lib/python2.3/site-packages', '/usr/lib/python2.3/site-packages/gtk-2.0']
				]]>
				</screen>
				<!-- <![CDATA[
$ python using_sys.py we are arguments
The command line arguments are:
using_sys.py
we
are
arguments


The PYTHONPATH is ['/home/swaroop/byte/code', '/usr/lib/python23.zip',
'/usr/lib/python2.3', '/usr/lib/python2.3/plat-linux2',
'/usr/lib/python2.3/lib-tk', '/usr/lib/python2.3/lib-dynload',
'/usr/lib/python2.3/site-packages', '/usr/lib/python2.3/site-packages/gtk-2.0']
				]]> -->
			</section>

			<section id="using-sys-module-how">
				<title>So funktioniert es</title> <!-- How It Works -->

				<para>

				Zuerst <emphasis>importieren</emphasis> wir das Modul <literal>sys</literal>
				mittels der <literal>import</literal>-Anweisung. Im Wesentlich teilen wir Python
				dadurch mit, dass wir dieses Modul in unserem Programm verwenden wollen. Das Modul
				<literal>sys</literal> enthält Funktionalität, die mit dem Python-Interpreter selbst
				und dessen Umgebung zu tun hat.

				<!-- First, we <emphasis>import</emphasis> the <literal>sys</literal> module
				using the <literal>import</literal> statement. Basically, this translates
				to us telling Python that we want to use this module. The
				<literal>sys</literal> module contains functionality related to the Python
				interpreter and its environment. -->

				</para>
				<para>

				Wenn Python die Anweisung <literal>import sys</literal> ausführt, sucht
				es nach dem Modul <filename>sys.py</filename> in einem der Verzeichnisse,
				die in seiner Variablen <varname>sys.path</varname> aufgelistet werden. Wird
				die Datei gefunden, so werden die Anweisungen im Hauptblock dieses Moduls
				ausgeführt. Das Modul wird für Sie dann <emphasis>verfügbar</emphasis>
				gemacht. Beachten Sie, dass die Initialisierung nur beim <emphasis>ersten</emphasis>
				Mal durchgeführt wird, wenn wir ein Modul importieren. Übrigens steht 'sys'
				als Abkürzung für 'System'.

				<!-- When Python executes the <literal>import sys</literal> statement, it looks for
				the <filename>sys.py</filename> module in one of the directores listed in its
				<varname>sys.path</varname> variable. If the file is found, then the
				statements in the main block of that module is run and then the module is
				made <emphasis>available</emphasis> for you to use. Note that the
				initialization is done only the <emphasis>first</emphasis> time that we
				import a module. Also, 'sys' is short for 'system'. -->

				</para>
				<para>

				Der Zugriff auf die Variable <varname>argv</varname> im Modul <literal>sys</literal>
				geschieht mittels der Punktnotation <varname>sys.argv</varname>.
				Ein Vorteil dieser Vorgehensweise besteht darin, dass der Name nicht mit einer anderen
				Variablen des Namens <varname>argv</varname> innerhalb Ihres Programms kollidiert.
				Auch weist er eindeutig darauf hin, dass er Teil des Moduls <literal>sys</literal> ist.

				<!-- The <varname>argv</varname> variable in the <literal>sys</literal> module is
				referred to using the dotted notation - <varname>sys.argv</varname> - one of
				the advantages of this approach is that the name does not clash with any
				<varname>argv</varname> variable used in your program. Also, it indicates
				clearly that this name is part of the <literal>sys</literal> module. -->

				</para>
				<para>

				Die Variable <varname>sys.argv</varname> ist eine <emphasis>Liste</emphasis> von
				Strings (Listen werden in späteren <link linkend="list">Abschnitten</link> genauer erklärt).
				Diese spezielle Liste <varname>sys.argv</varname> besteht aus den
				<emphasis>Kommandozeilenparametern</emphasis>, d.h. den zusätzlichen Argumenten,
				die Ihrem Programm über die Kommandozeile übergegeben wurden.

				<!-- The <varname>sys.argv</varname> variable is a <emphasis>list</emphasis> of
				strings (lists are explained in detail in later
				<link linkend="list">sections</link>). Specifically, the
				<varname>sys.argv</varname> contains the list of
				<emphasis>command line arguments</emphasis> i.e. the arguments passed to your
				program using the command line. -->

				</para>
				<para>

				Wenn Sie eine Entwicklungsumgebung verwenden, um diese Programme zu schreiben und auszuführen,
				suchen in den Menüs nach einer Möglichkeit, dem Programm Kommandozeilenparameter zu übergeben.

				<!-- If you are using an IDE to write and run these programs, look for a way to
				specify command line arguments to the program in the menus. -->

				</para>
				<para>
				Wenn wir <literal>python beispiel_sys.py Wir sind Argumente</literal>
				ausführen, starten wir das Modul <filename>beispiel_sys.py</filename> mit dem
				<command>python</command>-Befehl, und alles andere danach sind Argumente, die dem
				Programm übergeben werden. Python speichert sie für uns in der Variablen <varname>sys.argv</varname>.

				<!-- Here, when we execute <literal>python using_sys.py we are arguments</literal>,
				we run the module <filename>using_sys.py</filename> with the
				<command>python</command> command and the other things that follow are
				arguments passed to the program. Python stores it in the
				<varname>sys.argv</varname> variable for us. -->

				</para>
				<para>

				Denken Sie daran, dass der Name des laufenden Skripts immer der erste Parameter
				in der Liste <varname>sys.argv</varname> ist. In diesem Fall haben wir also
				<literal>'beispiel_sys.py'</literal> als <varname>sys.argv[0]</varname>,
				<literal>'Wir'</literal> als <varname>sys.argv[1]</varname>,
				<literal>'sind'</literal> als <varname>sys.argv[2]</varname> und
				<literal>'Argumente'</literal> als <varname>sys.argv[3]</varname>.
				Beachten Sie, dass Python mit 0 anfängt zu zählen, und nicht mit 1.

				<!-- Remember, the name of the script running is always the first argument in the
				<varname>sys.argv</varname> list. So, in this case we will have
				<literal>'using_sys.py'</literal> as <varname>sys.argv[0]</varname>,
				<literal>'we'</literal> as <varname>sys.argv[1]</varname>,
				<literal>'are'</literal> as <varname>sys.argv[2]</varname> and
				<literal>'arguments'</literal> as <varname>sys.argv[3]</varname> . Notice that
				Python starts counting from 0 and not 1. -->

				</para>
				<para>

				Die Variable <varname>sys.path</varname> enthält die Liste der Namen der
				Verzeichnisse, aus denen Module importiert werden. Beachten Sie, dass der erste String in
				<varname>sys.path</varname> leer ist - dieser Leerestring zeigt an, dass das
				aktuelle Verzeichnis auch Teil von <varname>sys.path</varname> ist, das ansonsten
				mit der Umgebungsvariablen <envar>PYTHONPATH</envar> übereinstimmt.
				Das bedeutet, dass Sie Module, die sich im gleichen Verzeichnis befinden, direkt
				importieren können. Andernfalls müssen Sie Ihr Modul in eines der Verzeichnisse platzieren,
				die in <varname>sys.path</varname> aufgelistet sind.

				<!-- The <varname>sys.path</varname> contains the list of directory names where
				modules are imported from. Observe that the first string in
				<varname>sys.path</varname> is empty - this empty string indicates that the
				current directory is also part of the <varname>sys.path</varname> which is
				same as the <envar>PYTHONPATH</envar> environment variable. This means
				that you can directly import modules located in the current directory.
				Otherwise, you will have to place your module in one of the directories
				listed in <varname>sys.path</varname>. -->

				</para>
			</section>
		</section>
	</section>
	<section id="byte-compiled">
		<title>Byte-kompilierte .pyc-Dateien</title> <!-- Byte-compiled .pyc files -->

		<para>

		Ein Modul zu importieren, ist hinsichtlich verbrauchter Rechenzeit eine relativ teure
		Angelegenheit, weswegen Python einige Tricks anwendet, um dies zu beschleunigen.
		Einer davon ist, <emphasis>byte-kompilierte</emphasis> Dateien mit der Endung
		<filename>.pyc</filename> zu erzeugen, die im Zusammenhang mit der
		Zwischenform stehen, in die Python ein Programm vor der Ausführung verwandelt (siehe
		die <link linkend="python-vm">Einführung zur Arbeitsweise von Python</link>).
		Die <filename>.pyc</filename>-Datei ist nützlich, wenn Sie das Modul das nächste
		Mal von einem anderen Programm aus importieren - dies wird viel schneller durchgeführt,
		da ein Teil des Vorgangs, der zum Import eines Moduls nötig ist, schon erledigt ist.
		Die byte-kompilierten Dateien sind auch plattformunabhängig. Jetzt wissen Sie also,
		wozu diese <filename>.pyc</filename>-Dateien eigentlich da sind.

		<!-- Importing a module is a relatively costly affair, so Python does some tricks to make
		it faster. One way is to create <emphasis>byte-compiled</emphasis> files with the extension
		<filename>.pyc</filename> which is related to the intermediate form that Python transforms
		the program into (remember the <link linkend="python-vm">intro section on how Python
		works</link> ?). This <filename>.pyc</filename> file is useful when you import the module the
		next time from a different program - it will be much faster since part of the processing
		required in importing a module is already done. Also, these byte-compiled files are
		platform-independent. So, now you know what those <filename>.pyc</filename> files really are. -->

		</para>

	</section>

	<section id="from-import">
		<title>Die Anweisung from..import</title> <!-- The from..import statement -->

		<para>

		Wenn Sie einfach nur die <varname>argv</varname> Variable in Ihr Programm importieren
		wollen (um zu vermeiden, jedes Mal <literal>sys.</literal> eingeben zu müssen), können Sie die
		Anweisung <literal>from sys import argv</literal> verwenden. Wenn Sie alle vom Modul
		<literal>sys</literal> verwendeten Namen importieren wollen, können Sie dafür die Anweisung
		<literal>from sys import *</literal> verwenden. Das funktioniert bei allen Modulen.
		Im Allgemeinen ist es besser, die Anweisung <literal>from..import</literal> zu vermeiden, und
		stattdessen die <literal>import</literal>-Anweisung zu verwenden. Ihr Programm wird dadurch
		um einiges lesbarer, und Sie vermeiden dadurch mögliche Namenskonflikte.

		<!-- If you want to directly import the <varname>argv</varname> variable into your program (to
		avoid typing the <literal>sys.</literal> everytime for it), then you can use the
		<literal>from sys import argv</literal> statement. If you want to import all the names
		used in the <literal>sys</literal> module, then you can use the
		<literal>from sys import *</literal> statement. This works for any module. In general,
		avoid using the <literal>from..import</literal> statement and use the
		<literal>import</literal> statement instead since your program will be much more readable
		and will avoid any name clashes that way. -->

		</para>
	</section>
	<section id="module-name">
		<title>Der __name__ eines Moduls</title> <!-- A module's __name__ -->

		<para>

		Jedes Modul hat einen Namen, und auf diesen Namen können Anweisungen in einem Modul
		zugreifen. Das ist in einer bestimmten Situation besonders nützlich: Wie vorher schon erwähnt,
		wird der Hauptblock eines Moduls ausgeführt, wenn es zum ersten Mal importiert wird. Was
		machen wir aber, wenn wir wollen, dass der Block nur ausgeführt wird, wenn das Modul
		als eigenständiges Programm selbst gestartet wurde, aber nicht, wenn es von einem anderen
		Modul importiert wurde? Dies können wir erreichen, indem wir das Attribut
		<varname>__name__</varname> des Moduls auswerten.

		<!-- Every module has a name and statements in a module can find out the name of its module.
		This is especially handy in one particular situation - As mentioned previously, when a
		module is imported for the first time, the main block in that module is run. What if we
		want to run the block only if the program was used by itself and not when it was
		imported from another module? This can be achieved using the <varname>__name__</varname>
		attribute of the module. -->

		</para>

		<section id="using-name">
			<title>Verwendung von __name__</title> <!-- Using a module's __name__ -->

			<example id="using-name-example">
				<title>Verwendung von __name__
					(<ulink url="code/beispiel_name.py">beispiel_name.py</ulink>)
				</title> <!-- Using a module's __name__ -->

				<programlisting>
				<![CDATA[
#!/usr/bin/python

if __name__ == '__main__':
	print 'Dieses Programm laeuft selbst'
else:
	print 'Ich werde von einem anderen Modul importiert'
				]]>
				</programlisting>
				<!-- <![CDATA[
#!/usr/bin/python
# Filename: using_name.py

if __name__ == '__main__':
	print 'This program is being run by itself'
else:
	print 'I am being imported from another module'
				]]> -->
			</example>

			<section id="using-name-output">
				<title>Ausgabe</title> <!-- Output -->

				<screen>
				<![CDATA[
$ python beispiel_name.py
Dieses Programm laeuft selbst

$ python
>>> import beispiel_name
Ich werde von einem anderen Modul importiert
>>>
				]]>
				</screen>
				<!-- <![CDATA[
$ python using_name.py
This program is being run by itself

$ python
>>> import using_name
I am being imported from another module
>>>
				]]> -->
			</section>

			<section id="using-name-how">
				<title>So funktioniert es</title> <!-- How It Works -->

				<para>

				Jedes Python Modul hat einen im Attribut <varname>__name__</varname> definierten
				Namen, und wenn dieser Name <literal>'__main__'</literal> lautet, dann bedeutet dies,
				dass das Modul als eigenständiges Programm vom Benutzer ausgeführt wurde, und wir können
				dementsprechende Aktionen durchführen.

				<!-- Every Python module has it's <varname>__name__</varname> defined and if this
				is <literal>'__main__'</literal>, it implies that the module is being run
				standalone by the user and we can do corresponding appropriate actions. -->

				</para>
			</section>
		</section>
	</section>

	<section id="making-modules">
		<title>Eigene Module erstellen</title> <!-- Making your own Modules -->

		<para>

		Es ist einfach, seine eigenen Module zu erstellen, Sie haben es schon die ganze Zeit getan!
		Jedes Python-Programm ist auch ein Modul. Sie müssen nur sicherstellen, dass es die
		Dateiendung <filename>.py</filename> hat. Das folgende Beispiel soll dies verdeutlichen:

		<!-- Creating your own modules is easy, you've been doing it all along! Every Python program
		is also a module. You just have to make sure it has a <filename>.py</filename> extension.
		The following example should make it clear. -->

		</para>

		<section id="creating-modules">
			<title>Eigene Module erstellen</title> <!-- Creating your own Modules -->

			<example id="creating-modules-example">
				<title>Wie man ein eigenes Modul erstellt
					(<ulink url="code/meinmodul.py">meinmodul.py</ulink>)
				</title> <!-- How to create your own module -->

				<programlisting>
				<![CDATA[
#!/usr/bin/python

def saghallo():
	print 'Hallo, hier spricht meinmodul.'

version = '0.1'

# Ende von meinmodul.py
				]]>
				</programlisting>
				<!-- <![CDATA[
#!/usr/bin/python
# Filename: mymodule.py

def sayhi():
	print 'Hi, this is mymodule speaking.'

version = '0.1'

# End of mymodule.py
				]]> -->
			</example>

			<para>

			Hiermit haben wir ein sehr einfaches Beispiel-<emphasis>Modul</emphasis> erstellt.
			Wie Sie sehen können, gibt es daran nichts Besonderes gegenüber einem gewöhnlichen
			Python-Programm. Als nächstes werden wir sehen, wie wir dieses Modul in unseren anderen
			Python-Programmen verwenden können.

			<!-- The above was a sample <emphasis>module</emphasis>. As you can see, there is nothing
			particularly special about compared to our usual Python program. We will next see
			how to use this module in our other Python programs. -->

			</para>
			<para>

			Erinnern Sie sich, dass das Modul in das gleiche Verzeichnis platziert werden sollte wie das
			Programm, von dem es importiert wird, oder dass es in einem der Verzeichnisse liegen sollte,
			die in <varname>sys.path</varname> aufgeführt sind.

			<!-- Remember that the module should be placed in the same directory as the program that
			we import it in, or the module should be in one of the directories listed in
			<varname>sys.path</varname>. -->

			</para>

			<simpara>Beispiel: <ulink url="code/meinmodul_demo.py">meinmodul_demo.py</ulink></simpara>

			<programlisting>
			<![CDATA[
#!/usr/bin/python

import meinmodul

meinmodul.saghallo()
print 'Version', meinmodul.version
			]]>
			</programlisting>

			<!-- <![CDATA[
#!/usr/bin/python
# Filename: mymodule_demo.py

import mymodule

mymodule.sayhi()
print 'Version', mymodule.version
			]]> -->

			<section id="creating-modules-output">
				<title>Ausgabe</title> <!-- Output -->

				<screen>
				<![CDATA[
$ python meinmodul_demo.py
Hallo, hier spricht meinmodul.
Version 0.1
				]]>
				</screen>
				<!-- <![CDATA[
$ python mymodule_demo.py
Hi, this is mymodule speaking.
Version 0.1
				]]> -->
			</section>

			<section id="creating-modules-how">
				<title>So funktioniert es</title> <!-- How It Works -->

				<para>

				Beachten Sie, dass wir beide Male die Punktnotation verwenden, um auf
				die Mitglieder des Moduls zuzugreifen. In Python verwendet man immer
				wieder die gleichen Schreibweisen, die einen besonderen 'pythonischen' Stil
				bilden, so dass wir nicht immer neue Weisen lernen müssen, Dinge zu tun.

				<!-- Notice that we use the same dotted notation to access members of the
				module. Python makes good reuse of the same notation to give the
				distinctive 'Pythonic' feel to it so that we don't have to keep
				learning new ways to do things. -->

				</para>
			</section>
		</section>

		<section id="using-from-import">
			<title>from..import</title> <!-- from..import -->

			<para>

			Hier ist eine Version, in der die <literal>from..import</literal>-Syntax verwendet wird.

			<!-- Here is a version utilising the <literal>from..import</literal> syntax. -->

			</para>

			<simpara>Beispiel: <ulink url="code/meinmodul_demo2.py">meinmodul_demo2.py</ulink></simpara>

			<programlisting>
			<![CDATA[
#!/usr/bin/python

from meinmodul import saghallo, version
# Andere Moeglichkeit:
# from meinmodul import *

saghallo()
print 'Version', version
			]]>
			</programlisting>
			<!-- <![CDATA[
#!/usr/bin/python
# Filename: mymodule_demo2.py

from mymodule import sayhi, version
# Alternative:
# from mymodule import *

sayhi()
print 'Version', version
			]]> -->

			<para>

			Die Ausgabe von <filename>meinmodul_demo2.py</filename> ist dieselbe
			wie die von <filename>meinmodul_demo.py</filename>.

			<!-- The output of <filename>mymodule_demo2.py</filename> is same as the output of
			<filename>mymodule_demo.py</filename>. -->

			</para>


		</section>
	</section>

	<section id="dir">

		<title>Die Funktion dir()</title> <!-- The dir() function -->

		<para>

		Sie können die eingebaute Funktion <function>dir()</function> benutzen, um
		die Bezeichner aufzulisten, die von einem Modul definiert werden. Die Bezeichner sind
		die Funktionen, Klassen und Variablen, die in dem jeweiligen Modul definiert werden.

		<!-- You can use the built-in <function>dir</function> function to list the identifiers
		that a module defines. The identifiers are the functions, classes and variables defined
		in that module. -->

		</para>
		<para>

		Wenn Sie der <function>dir</function>-Funktion einen Modulnamen übergeben,
		dann gibt sie die Liste der Namen zurück, die in diesem Modul definiert werden. Wenn
		kein Parameter übergegeben wird, gibt sie die Liste der Namen des aktuellen Moduls zurück.

		<!-- When you supply a module name to the <function>dir()</function> function, it returns the
		list of the names defined in that module. When no argument is applied to it, it returns
		the list of names defined in the current module. -->

		</para>

		<section id="using-dir">
			<title>Die dir-Funktion verwenden</title> <!-- Using the dir function -->

			<example id="using-dir-example">
				<title>Die dir-Funktion verwenden</title> <!--Using the dir function -->
				<screen>
				<![CDATA[
$ python
>>> import sys
>>> dir(sys) # Liste aller Attribute des sys-Moduls anzeigen
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',
'__stdin__', '__stdout__', '_getframe', 'api_version', 'argv',
'builtin_module_names', 'byteorder', 'call_tracing', 'callstats',
'copyright', 'displayhook', 'exc_clear', 'exc_info', 'exc_type',
'excepthook', 'exec_prefix', 'executable', 'exit', 'getcheckinterval',
'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding',
'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',
'meta_path','modules', 'path', 'path_hooks', 'path_importer_cache',
'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',
'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',
'version', 'version_info', 'warnoptions']
>>> dir() # Liste aller Attribute des aktuellen Moduls anzeigen
['__builtins__', '__doc__', '__name__', 'sys']
>>>
>>> a = 5 # erzeuge eine neue Variable 'a'
>>> dir()
['__builtins__', '__doc__', '__name__', 'a', 'sys']
>>>
>>> del a # loesche/entferne einen Namen
>>>
>>> dir()
['__builtins__', '__doc__', '__name__', 'sys']
>>>
				]]>
				</screen>
				<!-- <![CDATA[
$ python
>>> import sys
>>> dir(sys) # get list of attributes for sys module
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',
'__stdin__', '__stdout__', '_getframe', 'api_version', 'argv',
'builtin_module_names', 'byteorder', 'call_tracing', 'callstats',
'copyright', 'displayhook', 'exc_clear', 'exc_info', 'exc_type',
'excepthook', 'exec_prefix', 'executable', 'exit', 'getcheckinterval',
'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding',
'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',
'meta_path','modules', 'path', 'path_hooks', 'path_importer_cache',
'platform', 'prefix', 'ps1', 'ps2', 'setcheckinterval', 'setdlopenflags',
'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout',
'version', 'version_info', 'warnoptions']
>>> dir() # get list of attributes for current module
['__builtins__', '__doc__', '__name__', 'sys']
>>>
>>> a = 5 # create a new variable 'a'
>>> dir()
['__builtins__', '__doc__', '__name__', 'a', 'sys']
>>>
>>> del a # delete/remove a name
>>>
>>> dir()
['__builtins__', '__doc__', '__name__', 'sys']
>>>
				]]> -->
			</example>

			<section id="using-dir-how">
				<title>So funktioniert es</title> <!-- How It Works -->

				<para>

				Zuerst sehen wir die Anwendung von <function>dir</function> auf das
				importierte <literal>sys</literal>-Modul. Wir können die riesige Liste
				von Attributen sehen, die darin enthalten sind.

				<!-- First, we see the usage of <function>dir</function> on the imported
				<literal>sys</literal> module. We can see the huge list of attributes
				that it contains. -->

				</para>
				<para>

				Als Nächstes verwenden wir die <function>dir</function>-Funktion,
				ohne ihr einen Parameter zu übergeben: Die Voreinstellung ist, dass sie die
				Attribute des aktuellen Moduls zurückliefert. Beachten Sie, dass die
				importierten Module ebenfalls Teil der Liste sind.

				<!-- Next, we use the <function>dir</function> function without passing
				parameters to it - by default, it returns the list of attributes for
				the current module. Notice that the list of imported modules is also
				part of this list. -->

				</para>
				<para>

				Um zu sehen, wie die <function>dir</function>-Funktion arbeitet, definieren wir
				eine neue Variable <varname>a</varname>, und weisen ihr einen Wert zu. Danach
				überprüfen wir, was sich an der Ausgabe von <function>dir</function> geändert hat.
				Wir stellen fest, dass es in der Liste ein zusätzliches Element des gleichen Namens
				<varname>a</varname> gibt. Wir entfernen die Variable bzw. das Attribut des
				Moduls mittels der Anweisung <literal>del</literal>. Als Resultat der Änderung
				sehen wir wieder eine entsprechende Ausgabe der <function>dir</function>-Funktion.

				<!-- In order to observe the <function>dir</function> in action, we define
				a new variable <varname>a</varname> and assign it a value and then check
				<function>dir</function> and we observe that there is an additional
				value in the list of the same name. We remove the variable/attribute of
				the current module using the <literal>del</literal> statement and the
				change is reflected again in the output of the <function>dir</function>
				function. -->

				</para>
				<para>

				Eine Anmerkung zu <literal>del</literal>: Diese Anweisung wird benutzt,
				um eine Variable bzw. einen Namen zu <emphasis>entfernen</emphasis>
				(<literal>del</literal> steht kurz für <foreignphrase>delete</foreignphrase>).
				Nachdem die Anweisung ausgeführt wurde (in diesem Fall <literal>del a</literal>),
				können Sie nicht mehr auf die Variable <varname>a</varname> zugreifen -
				es ist, als hätte es sie nie gegeben.

				<!-- A note on <literal>del</literal> - this statement is used to
				<emphasis>delete</emphasis> a variable/name and after the statement has
				run, in this case <literal>del a</literal>, you can no longer access the
				variable <varname>a</varname> - it is as if it never existed before at all. -->

				</para>

			</section>
		</section>
	</section>

	<section id="modules-summary">
		<title>Zusammenfassung</title> <!-- Summary -->

		<para>

		Module sind nützlich, weil sie Dienste und Funktionalität zur Verfügung stellen,
		die Sie in anderen Programmen wiederverwenden können. Die Standardbibliothek,
		die mit Python ausgeliefert wird, ist ein Beispiel für einen solchen Satz von Modulen.
		Wir haben gesehen, wie wir solche Module verwenden können, und auch, wie wir
		eigene Module erstellen können.

		<!-- Modules are useful because they provide services and functionality that you can reuse in
		other programs. The standard library that comes with Python is an example of such a set
		of modules. We have seen how to use these modules and create our own modules as well. -->

		</para>
		<para>

		Als Nächstes werden wir einige interessante Konzepte kennen lernen,
		die Datenstrukturen genannt werden.

		<!-- Next, we will learn about some interesting concepts called data structures. -->

		</para>

	</section>
</chapter>